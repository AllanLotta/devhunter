[{"/Users/allanlotta/nkey/devhunter/src/index.tsx":"1","/Users/allanlotta/nkey/devhunter/src/App.tsx":"2","/Users/allanlotta/nkey/devhunter/src/styles/global.ts":"3","/Users/allanlotta/nkey/devhunter/src/routes/index.tsx":"4","/Users/allanlotta/nkey/devhunter/src/hooks/index.tsx":"5","/Users/allanlotta/nkey/devhunter/src/hooks/Jobs/index.tsx":"6","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Post/index.tsx":"7","/Users/allanlotta/nkey/devhunter/src/pages/Home/index.tsx":"8","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/index.tsx":"9","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Job/index.tsx":"10","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Edit/index.tsx":"11","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Post/styles.ts":"12","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Job/styles.ts":"13","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/styles.ts":"14","/Users/allanlotta/nkey/devhunter/src/pages/Home/styles.ts":"15","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Edit/styles.ts":"16","/Users/allanlotta/nkey/devhunter/src/styles/colors.ts":"17","/Users/allanlotta/nkey/devhunter/src/components/Header/index.tsx":"18","/Users/allanlotta/nkey/devhunter/src/components/Header/styles.ts":"19","/Users/allanlotta/nkey/devhunter/src/components/Input/index.tsx":"20","/Users/allanlotta/nkey/devhunter/src/components/Input/styles.ts":"21","/Users/allanlotta/nkey/devhunter/src/components/Tooltip/index.tsx":"22","/Users/allanlotta/nkey/devhunter/src/components/Tooltip/styles.ts":"23","/Users/allanlotta/nkey/devhunter/src/utils/getValidationErrors.ts":"24","/Users/allanlotta/nkey/devhunter/src/components/TextArea/index.tsx":"25","/Users/allanlotta/nkey/devhunter/src/components/TextArea/styles.ts":"26","/Users/allanlotta/nkey/devhunter/src/config/api.ts":"27","/Users/allanlotta/nkey/devhunter/src/utils/formatNumber.ts":"28","/Users/allanlotta/nkey/devhunter/src/components/JobCard/index.tsx":"29","/Users/allanlotta/nkey/devhunter/src/components/JobCard/styles.ts":"30","/Users/allanlotta/nkey/devhunter/src/services/api.ts":"31","/Users/allanlotta/nkey/devhunter/src/components/Select/index.tsx":"32","/Users/allanlotta/nkey/devhunter/src/utils/const.ts":"33","/Users/allanlotta/nkey/devhunter/src/components/Select/styles.tsx":"34","/Users/allanlotta/nkey/devhunter/src/hooks/Company/index.tsx":"35","/Users/allanlotta/nkey/devhunter/src/components/header/index.tsx":"36","/Users/allanlotta/nkey/devhunter/src/components/header/styles.ts":"37"},{"size":199,"mtime":1617207791087,"results":"38","hashOfConfig":"39"},{"size":410,"mtime":1618060856125,"results":"40","hashOfConfig":"39"},{"size":602,"mtime":1617225860161,"results":"41","hashOfConfig":"39"},{"size":602,"mtime":1617459423381,"results":"42","hashOfConfig":"39"},{"size":280,"mtime":1617449708350,"results":"43","hashOfConfig":"39"},{"size":2315,"mtime":1618021146531,"results":"44","hashOfConfig":"39"},{"size":4583,"mtime":1617460738626,"results":"45","hashOfConfig":"39"},{"size":575,"mtime":1617367965187,"results":"46","hashOfConfig":"39"},{"size":935,"mtime":1618027026043,"results":"47","hashOfConfig":"39"},{"size":1708,"mtime":1617460641261,"results":"48","hashOfConfig":"39"},{"size":5933,"mtime":1618021298173,"results":"49","hashOfConfig":"39"},{"size":1545,"mtime":1617458571289,"results":"50","hashOfConfig":"39"},{"size":1146,"mtime":1617411509030,"results":"51","hashOfConfig":"39"},{"size":803,"mtime":1618027319895,"results":"52","hashOfConfig":"39"},{"size":1105,"mtime":1617367818405,"results":"53","hashOfConfig":"39"},{"size":1545,"mtime":1617459373310,"results":"54","hashOfConfig":"39"},{"size":269,"mtime":1617411379914,"results":"55","hashOfConfig":"39"},{"size":600,"mtime":1618065192076,"results":"56","hashOfConfig":"39"},{"size":1184,"mtime":1617226320666,"results":"57","hashOfConfig":"39"},{"size":1444,"mtime":1618061853342,"results":"58","hashOfConfig":"39"},{"size":1172,"mtime":1617411478945,"results":"59","hashOfConfig":"39"},{"size":367,"mtime":1617279811926,"results":"60","hashOfConfig":"39"},{"size":738,"mtime":1617279771626,"results":"61","hashOfConfig":"39"},{"size":366,"mtime":1617281108467,"results":"62","hashOfConfig":"39"},{"size":1527,"mtime":1617385520258,"results":"63","hashOfConfig":"39"},{"size":1077,"mtime":1618021519863,"results":"64","hashOfConfig":"39"},{"size":176,"mtime":1617209114972,"results":"65","hashOfConfig":"66"},{"size":182,"mtime":1617359754447,"results":"67","hashOfConfig":"39"},{"size":630,"mtime":1617418732425,"results":"68","hashOfConfig":"39"},{"size":984,"mtime":1617367432057,"results":"69","hashOfConfig":"39"},{"size":368,"mtime":1617369676167,"results":"70","hashOfConfig":"39"},{"size":1347,"mtime":1618017883135,"results":"71","hashOfConfig":"39"},{"size":467,"mtime":1618018436119,"results":"72","hashOfConfig":"39"},{"size":139,"mtime":1617379251333,"results":"73","hashOfConfig":"39"},{"size":1606,"mtime":1617449746585,"results":"74","hashOfConfig":"39"},{"size":600,"mtime":1618065192076,"results":"75","hashOfConfig":"39"},{"size":1184,"mtime":1617226320666,"results":"76","hashOfConfig":"39"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"2hnprs",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"79"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"79"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},"1xxwl53",{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/allanlotta/nkey/devhunter/src/index.tsx",[],["156","157","158","159","160"],"/Users/allanlotta/nkey/devhunter/src/App.tsx",[],"/Users/allanlotta/nkey/devhunter/src/styles/global.ts",[],"/Users/allanlotta/nkey/devhunter/src/routes/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/hooks/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/hooks/Jobs/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Post/index.tsx",["161"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\n\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\n\nimport Input from '../../../components/Input';\n\nimport { Container, Content, SalaryContainer, SelectContainer } from './styles';\nimport getValidationErrors from '../../../utils/getValidationErrors';\nimport TextArea from '../../../components/TextArea';\nimport { Select } from '../../../components/Select';\nimport { levels, roles, types } from '../../../utils/const';\nimport { useJobs } from '../../../hooks/Jobs';\nimport { IJob, PostFormData } from '../../../hooks/Jobs/interfaces';\nimport { useCompany } from '../../../hooks/Company';\nimport { ICompany } from '../../../hooks/Company/interfaces';\n\ninterface SelectData {\n  value: number;\n  label: string;\n}\n\nconst PostJob: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n  const history = useHistory();\n  const { postJob } = useJobs();\n  const { getCompanyList } = useCompany();\n  const [companies, setCompanies] = useState<ICompany[]>();\n  const [selectCompanyData, setSelectCompanyData] = useState<SelectData[]>(\n    [] as SelectData[],\n  );\n\n  useEffect(() => {\n    const loadCompanies = async () => {\n      const companiesData = await getCompanyList();\n      setCompanies(companiesData);\n    };\n    loadCompanies();\n  }, []);\n\n  useEffect(() => {\n    if (companies && companies?.length > 0) {\n      const loadCompanySelectData = () => {\n        const selectDataTemp: SelectData[] = [];\n        companies.map((company) => {\n          selectDataTemp.push({\n            value: company.id,\n            label: company.company,\n          });\n        });\n        setSelectCompanyData(selectDataTemp);\n      };\n      loadCompanySelectData();\n    }\n  }, [companies]);\n\n  const handleSubmit = useCallback(async (data: PostFormData) => {\n    try {\n      console.log(data);\n      formRef.current?.setErrors({});\n\n      const schema = Yup.object().shape({\n        title: Yup.string().required('Field required'),\n        description: Yup.string().required('Field required'),\n        company_id: Yup.number(),\n        role: Yup.string(),\n        type: Yup.string(),\n        level: Yup.string(),\n        salary_min: Yup.number().required('Field required'),\n        salary_max: Yup.number().required('Field required'),\n      });\n\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n\n      const params: IJob = {\n        ...data,\n        id: parseInt(Math.random().toString(36), 10),\n      };\n\n      const didPosted = await postJob(params);\n\n      if (didPosted) {\n        history.push('/jobs');\n      }\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        const errors = getValidationErrors(err);\n\n        formRef.current?.setErrors(errors);\n      }\n    }\n  }, []);\n\n  return (\n    <Container>\n      <Content>\n        <h2>Post a job</h2>\n        <Form ref={formRef} onSubmit={handleSubmit}>\n          <span>Job Title</span>\n          <Input name=\"title\" placeholder=\"Title\" />\n          <SelectContainer>\n            <Select\n              defaultValue={roles[0]}\n              name=\"role\"\n              placeholder=\"Select Role\"\n              options={roles}\n            />\n            <Select\n              defaultValue={types[0]}\n              name=\"type\"\n              placeholder=\"Select Type\"\n              options={types}\n            />\n            <Select\n              defaultValue={levels[0]}\n              name=\"level\"\n              placeholder=\"Select Level\"\n              options={levels}\n            />\n          </SelectContainer>\n          <SalaryContainer>\n            <div>\n              <span>Minimum payment</span>\n              <Input\n                name=\"salary_min\"\n                inputMode=\"numeric\"\n                placeholder=\"50000\"\n              />\n            </div>\n            <div>\n              <span>Maximum payment</span>\n              <Input\n                name=\"salary_max\"\n                inputMode=\"numeric\"\n                placeholder=\"120000\"\n              />\n            </div>\n          </SalaryContainer>\n          <span>Company</span>\n          <Select\n            name=\"company_id\"\n            placeholder=\"Select Company\"\n            options={selectCompanyData}\n          />\n          <span>Description</span>\n          <TextArea name=\"description\" placeholder=\"Description\" />\n\n          <button type=\"submit\">Post</button>\n        </Form>\n      </Content>\n    </Container>\n  );\n};\nexport default PostJob;\n","/Users/allanlotta/nkey/devhunter/src/pages/Home/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/pages/Jobs/index.tsx",["162"],"import React, { useEffect, useState } from 'react';\nimport JobCard from '../../components/JobCard';\nimport { useJobs } from '../../hooks/Jobs';\nimport { IJob } from '../../hooks/Jobs/interfaces';\n\nimport {\n  Container,\n  Content,\n  FilterContainer,\n  FilterContent,\n  FilterButton,\n  FilterClear,\n} from './styles';\n\nconst Jobs: React.FC = () => {\n  const [jobs, setJobs] = useState<IJob[]>([] as IJob[]);\n  const { getJobsList } = useJobs();\n\n  useEffect(() => {\n    const loadJobs = async () => {\n      const jobsArray = await getJobsList();\n      setJobs(jobsArray);\n    };\n    loadJobs();\n  }, []);\n\n  return (\n    <Container>\n      <Content>\n        <FilterContainer>\n          <FilterButton>filter</FilterButton>\n          <FilterClear>X</FilterClear>\n        </FilterContainer>\n        {jobs.map((job) => (\n          <JobCard key={job.id} job={job} />\n        ))}\n      </Content>\n    </Container>\n  );\n};\n\nexport default Jobs;\n","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Job/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Edit/index.tsx",["163","164"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\n\nimport * as Yup from 'yup';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport Input from '../../../components/Input';\n\nimport { Container, Content, SalaryContainer, SelectContainer } from './styles';\nimport getValidationErrors from '../../../utils/getValidationErrors';\nimport TextArea from '../../../components/TextArea';\nimport { Select } from '../../../components/Select';\nimport { levels, roles, types } from '../../../utils/const';\nimport { useJobs } from '../../../hooks/Jobs';\nimport { IJob, PostFormData } from '../../../hooks/Jobs/interfaces';\nimport { useCompany } from '../../../hooks/Company';\nimport { ICompany } from '../../../hooks/Company/interfaces';\n\ninterface SelectData {\n  value: number;\n  label: string;\n}\n\ninterface Params {\n  id: string;\n}\n\nconst EditJob: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n  const history = useHistory();\n  const { id } = useParams<Params>();\n  const [job, setJob] = useState<IJob>();\n  const { editJob, getJobById } = useJobs();\n  const { getCompanyList } = useCompany();\n  const [companies, setCompanies] = useState<ICompany[]>();\n  const [selectCompanyData, setSelectCompanyData] = useState<SelectData[]>(\n    [] as SelectData[],\n  );\n\n  useEffect(() => {\n    const loadJobData = async () => {\n      const jobId = parseInt(id, 10);\n      const jobData = await getJobById(jobId);\n      console.log(jobData);\n      setJob(jobData);\n    };\n    const loadCompanies = async () => {\n      const companiesData = await getCompanyList();\n      setCompanies(companiesData);\n    };\n    loadJobData();\n    loadCompanies();\n  }, []);\n\n  useEffect(() => {\n    if (companies && companies?.length > 0) {\n      const loadCompanySelectData = () => {\n        const selectDataTemp: SelectData[] = [];\n        companies.map((company) => {\n          selectDataTemp.push({\n            value: company.id,\n            label: company.company,\n          });\n        });\n        setSelectCompanyData(selectDataTemp);\n      };\n      loadCompanySelectData();\n    }\n  }, [companies]);\n\n  const handleSubmit = useCallback(async (data: PostFormData) => {\n    try {\n      console.log(data);\n      formRef.current?.setErrors({});\n\n      const schema = Yup.object().shape({\n        title: Yup.string().required('Field required'),\n        description: Yup.string().required('Field required'),\n        company_id: Yup.number(),\n        role: Yup.string(),\n        type: Yup.string(),\n        level: Yup.string(),\n        salary_min: Yup.number().required('Field required'),\n        salary_max: Yup.number().required('Field required'),\n      });\n\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n\n      const params: IJob = {\n        id: parseInt(id, 10),\n        ...data,\n      };\n\n      const didPosted = await editJob(params);\n\n      if (didPosted) {\n        history.push('/jobs');\n      }\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        const errors = getValidationErrors(err);\n\n        formRef.current?.setErrors(errors);\n      }\n    }\n  }, []);\n\n  const setDefaultValueCompanySelect = useCallback(() => {\n    if (companies && job) {\n      const result = companies.filter((item) => item.id === job.company_id);\n      if (result.length > 0) {\n        return {\n          value: result[0].id,\n          label: result[0].company,\n        };\n      }\n      return null;\n    }\n    return null;\n  }, [job, companies]);\n\n  return (\n    <Container>\n      <Content>\n        <h2>Post a job</h2>\n        <Form ref={formRef} onSubmit={handleSubmit}>\n          <span>Job Title</span>\n          <Input name=\"title\" defaultValue={job?.title} placeholder=\"Title\" />\n          {job && (\n            <SelectContainer>\n              <Select\n                defaultValue={{ value: job?.role, label: job?.role }}\n                name=\"role\"\n                hideSelectedOptions\n                placeholder=\"Select Role\"\n                options={roles}\n              />\n              <Select\n                defaultValue={{ value: job?.type, label: job?.type }}\n                name=\"type\"\n                hideSelectedOptions\n                placeholder=\"Select Type\"\n                options={types}\n              />\n              <Select\n                defaultValue={{ value: job?.level, label: job?.level }}\n                name=\"level\"\n                hideSelectedOptions\n                placeholder=\"Select Level\"\n                options={levels}\n              />\n            </SelectContainer>\n          )}\n          <SalaryContainer>\n            <div>\n              <span>Minimum payment</span>\n              <Input\n                defaultValue={job?.salary_min}\n                name=\"salary_min\"\n                inputMode=\"numeric\"\n                placeholder=\"50000\"\n              />\n            </div>\n            <div>\n              <span>Maximum payment</span>\n              <Input\n                defaultValue={job?.salary_max}\n                name=\"salary_max\"\n                inputMode=\"numeric\"\n                placeholder=\"120000\"\n              />\n            </div>\n          </SalaryContainer>\n          {job && companies && (\n            <>\n              <span>Company</span>\n              <Select\n                defaultValue={setDefaultValueCompanySelect()}\n                hideSelectedOptions\n                name=\"company_id\"\n                placeholder=\"Select Company\"\n                options={selectCompanyData}\n              />\n            </>\n          )}\n          <span>Description</span>\n          <TextArea\n            defaultValue={job?.description}\n            name=\"description\"\n            placeholder=\"Description\"\n          />\n\n          <button type=\"submit\">Save</button>\n        </Form>\n      </Content>\n    </Container>\n  );\n};\n\nexport default EditJob;\n","/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Post/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Job/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/pages/Jobs/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/pages/Home/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/pages/Jobs/Edit/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/styles/colors.ts",[],"/Users/allanlotta/nkey/devhunter/src/components/Header/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/components/Header/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/components/Input/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/components/Input/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/components/Tooltip/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/components/Tooltip/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/utils/getValidationErrors.ts",[],"/Users/allanlotta/nkey/devhunter/src/components/TextArea/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/components/TextArea/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/config/api.ts",[],["165","166","167","168","169"],"/Users/allanlotta/nkey/devhunter/src/utils/formatNumber.ts",[],"/Users/allanlotta/nkey/devhunter/src/components/JobCard/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/components/JobCard/styles.ts",[],"/Users/allanlotta/nkey/devhunter/src/services/api.ts",[],"/Users/allanlotta/nkey/devhunter/src/components/Select/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/utils/const.ts",[],"/Users/allanlotta/nkey/devhunter/src/components/Select/styles.tsx",[],"/Users/allanlotta/nkey/devhunter/src/hooks/Company/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/components/header/index.tsx",[],"/Users/allanlotta/nkey/devhunter/src/components/header/styles.ts",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","severity":1,"message":"181","line":61,"column":7,"nodeType":"182","messageId":"183","endLine":61,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":10,"column":3,"nodeType":"186","messageId":"187","endLine":10,"endColumn":16},{"ruleId":"180","severity":1,"message":"181","line":45,"column":7,"nodeType":"182","messageId":"183","endLine":45,"endColumn":18},{"ruleId":"180","severity":1,"message":"181","line":74,"column":7,"nodeType":"182","messageId":"183","endLine":74,"endColumn":18},{"ruleId":"170","replacedBy":"188"},{"ruleId":"172","replacedBy":"189"},{"ruleId":"174","replacedBy":"190"},{"ruleId":"176","replacedBy":"191"},{"ruleId":"178","replacedBy":"192"},"lines-around-directive",["193"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-unused-vars","'FilterContent' is defined but never used.","Identifier","unusedVar",["193"],[],[],[],[],"padding-line-between-statements"]